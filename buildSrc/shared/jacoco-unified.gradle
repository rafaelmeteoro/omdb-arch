apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//android.buildTypes.debug.testCoverageEnabled = true

//Variáveis necessárias

ext.instrumentedTestTaskName = ":app:createDebugCoverageReport"
ext.unitTestTaskName = ":app:testDebugUnitTest"
ext.demoName = "app"
ext.libName = "app"
ext.flavorLib = ""
ext.flavorDemo = ""

task "fullCoverage"(type: JacocoReport, dependsOn: [unitTestTaskName, instrumentedTestTaskName]) {
    group = "Reporting"
    description = "Generate Jacoco combined coverage reports for Instrumented and Unit Tests"
    onlyIf = { true }
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def libFlavorDir = flavorLib == "" ? "debug" : "${flavorLib}Debug"
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*App.*',
            '**/*Component.*',
            '**/*Module.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*' //Dagger auto-generated code
    ]

    def libDebugTree = fileTree(dir: "${rootDir}/$libName/build/tmp/kotlin-classes/$libFlavorDir", excludes: fileFilter)
    def libMainSrc = "$rootDir/$libName/src/main/java"

    sourceDirectories = files([libMainSrc])
    classDirectories = files([libDebugTree])

    def flavorPath = flavorDemo != "" ? "flavors/${flavorDemo.toUpperCase()}/" : ""

    executionData = fileTree(dir: "$rootDir", includes: [
            "$libName/build/jacoco/test${flavorLib.capitalize()}DebugUnitTest.exec",
            "$demoName/build/outputs/code-coverage/connected/${flavorPath}*coverage.ec",
            "$demoName/build/outputs/code_coverage/debugAndroidTest/connected/*coverage.ec",
            "$demoName/build/spoon-output/debug/coverage/**/*.ec",
    ])
}